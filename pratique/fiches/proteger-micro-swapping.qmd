---
title: Appliquer le Target Record Swapping
---


Pour installer les packages nécessaires, vous trouverez les instructions à suivre 
dans la fiche [Ressources / Installer les packages et les outils sur R](../../ressources/fiches/outils-install.html).  

```{r}
#| echo: false
library(readr)
library(purrr)
library(dplyr)
library(sdcMicro)
```

## Importons les données

```{r}
source("../R/prepa_data.R")
```


```{r}
head(lfs_2023)
```

Pour plus d'informations sur les données, on pourra se reporter à la fiche 
["Présentation des données"](description-data.html).  


## Mesurons les risques du fichier

### Les types de variables

On définit les variables selon les différentes catégories suivantes:

- les variables quasi-identifiantes (`key_vars`)
- les variables sensibles (`sens_vars`)
- les variables identifiant la composition des ménages (`hhid_vars`)

Pour cet exercice, nous ferons les choix suivants:

```{r}
key_vars <- c("AGE","SEXE","DEP","DIP7")
sens_vars <- c("ACTEU","ANCCHOM")
hhid_vars <- c("HHID")
```


## Préparartion pour le swapping

```{r}
lfs_2023_pr_swap <- lfs_2023 %>% 
  mutate(across(everything(), as.integer)) %>% 
  mutate(
    REG = floor(DEP / 10),
    ID = 1:n()
  ) %>% 
  group_by(HHID) %>% 
  mutate(TAILLE = n()) %>% 
  ungroup() %>% 
  data.table::as.data.table()
```


```{r}
risk_variables <- c("AGE6","SEXE","ACTEU")
hierarchy <- c("REG", "DEP")
similar <- c("DIP7")
carry_along <- NULL
k_anonymity <- 1
swaprate <- .05


hid <- "ID" # swapping d'individus
```


### Swapper les individus


```{r}
lfs_swapped <- recordSwap(
  data = lfs_2023_pr_swap,
  hid = hid,
  hierarchy = hierarchy,
  similar = similar,
  risk_variables = risk_variables,
  carry_along = carry_along,
  k_anonymity = k_anonymity,
  swaprate = swaprate,
  return_swapped_id = TRUE,
  seed = 123456
)

lfs_swapped %>% summarise(mean(ID != ID_swapped)) #5%
lfs_swapped %>% group_by(REG) %>%
  summarise(mean(ID != ID_swapped)) #5%
```


#### Vérifier que les individus à risque ont bien été swappés


#### Intégrité de la composition des ménages



### Swapper les ménages


```{r}
hid <- "HHID" # swapping de ménages
similar <- "TAILLE"

lfs_swapped_hh <- recordSwap(
  data = lfs_2023_pr_swap,
  hid = hid,
  hierarchy = hierarchy,
  similar = similar,
  risk_variables = risk_variables,
  carry_along = carry_along,
  k_anonymity = k_anonymity,
  swaprate = swaprate,
  return_swapped_id = TRUE,
  seed = 123456
)
```


#### Taux de swapping des ménages vs taux de swapping des individus

```{r}
lfs_swapped_hh %>% summarise(mean(HHID != HHID_swapped)) #6.2 des ménages
lfs_swapped_hh %>% filter(HHID != HHID_swapped) %>%
  summarise(n()/nrow(lfs_swapped_hh)*100) #6.2% des individus (les ménages swappés sont de même taille)
lfs_swapped_hh %>% filter(HHID != HHID_swapped) %>%
  summarise(mean(TAILLE))

```

## Mesurer la perte d'utilité 


Comparer différents taux de swapping.

### Comparer les intervalles de confiance d'un modèle logistique

```{r}
source("../R/fun_cio.R")
```


Étudions la stabilité d'un modèle relativement simple, cherchant à expliquer 
le fait d'être au chômage par différentes variables à notre disposition:
l'âge, le diplôme et le sexe.

On entraînera ce modèle uniquement sur la population active. On retire donc notamment 
la population étudiante et retraitée.


```{r}
m_original <- glm(IS_CHOM ~ SEXE + AGE6 + DIP7, data = lfs_2023 |> filter(ACTEU != 3))
m_swapped <- glm(IS_CHOM ~ SEXE + AGE6 + DIP7, data = lfs_2023 |> filter(ACTEU != 3))

mes_modeles <- list(
  "original" = m_original,
  "swapped" = m_swapped
)

all_cios <- get_all_confints(mes_modeles)
```


```{r}
graph_cios(all_cios, titre = "Superposition des intervalles de confiance\ndes Odds Ratio du modèle selon le jeu de données") +
  theme(axis.text.y =  element_text(size = 8))
```

